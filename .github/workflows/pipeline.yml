name: Run Message Mind Pipeline

on:
  schedule:
    - cron: 0 * * * *   # Every hour
  push:
    branches:
      - main
      - cicd

env:
  MONGODB_ATLAS_PUBLIC_API_KEY: ${{ secrets.PUBLIC_API_KEY }}
  MONGODB_ATLAS_PRIVATE_API_KEY: ${{ secrets.PRIVATE_API_KEY }}
  MONGODB_ATLAS_PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  telethon-extraction:
    name: Extract messages from Telegram
    runs-on: ubuntu-latest
    container:
      image: python:3.12-slim

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: |
          pip install uv

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y openssl ca-certificates libssl-dev sudo curl
          rm -rf /var/lib/apt/lists/*

      - name: Verify OpenSSL version
        run: |
          openssl version
          python -c "import ssl; print(ssl.OPENSSL_VERSION)"

       # Grant temporary MongoDB access to this Github Action runner ip address
      - name: Get the public IP of this runner
        id: get_gh_runner_ip
        shell: bash
        run: |
          echo "ip_address=$(curl https://checkip.amazonaws.com)" >> "$GITHUB_OUTPUT"

      - name: Setup AtlasCLI
        uses: mongodb/atlas-github-action@v0.2.0

      - name: Use AtlasCLI
        shell: bash
        run: atlas --version # Print Atlas CLI Version

      # Configure Atlas CLI with a named profile
      - name: Configure Atlas CLI with API keys
        env:
          MONGODB_ATLAS_PUBLIC_API_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_API_KEY }}
          MONGODB_ATLAS_PRIVATE_API_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_API_KEY }}
        run: |
          atlas config set public_api_key $MONGODB_ATLAS_PUBLIC_API_KEY
          atlas config set private_api_key $MONGODB_ATLAS_PRIVATE_API_KEY
          atlas config set project_id ${{ secrets.MONGODB_ATLAS_PROJECT_ID }}

      # Test Atlas CLI configurations
      - name: Test Atlas CLI
        run: atlas projects list

      - name: Add runner IP to MongoDB access list
        shell: bash
        run: |
          atlas accessLists create ${{ steps.get_gh_runner_ip.outputs.ip_address }} --type ipAddress --projectId ${{ secrets.MONGODB_ATLAS_PROJECT_ID }} --comment  "Temporary access for GH Action"


      - name: Set up environment variables
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_URI=${{ secrets.DB_URI }}" >> .env
          echo "DB_APP_NAME=${{ secrets.DB_APP_NAME }}" >> .env
          echo "DB_COLLECTION_NAME=${{ secrets.DB_COLLECTION_NAME }}" >> .env

          echo "BOT_TELETHON_SESSION=${{ secrets.BOT_TELETHON_SESSION }}" >> .env
          echo "USER_TELETHON_SESSION=${{ secrets.USER_TELETHON_SESSION }}" >> .env
          echo "TELEGRAM_CHAT_API_ID=${{ secrets.TELEGRAM_CHAT_API_ID }}" >> .env
          echo "TELEGRAM_CHAT_API_HASH=${{ secrets.TELEGRAM_CHAT_API_HASH }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env

        shell: bash

      - name: Install Python dependencies
        run: |
          uv sync

      - name: Restore Telethon client session
        run: |
          echo "${{ secrets.BOT_TELETHON_SESSION_B64 }}" | base64 -d > bot.session
          echo "${{ secrets.USER_TELETHON_SESSION_B64 }}" | base64 -d > joanna.session

      - name: Run Telethon extraction script
        run: |
          uv run src/message_mind/database_management/main.py

      - name: Remove GH runner IP from MongDB access list
        shell: bash
        run: |
          atlas accessLists delete ${{ steps.get_gh_runner_ip.outputs.ip_address }} --projectId ${{ secrets.MONGODB_ATLAS_PROJECT_ID }} --force

  langgraph-workflow:
    name: Categorise messages
    runs-on: ubuntu-latest
    container:
      image: python:3.12-slim
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: |
          pip install uv

      - name: Install Python dependencies
        run: |
          uv sync

      - name: Run LangGraph workflow script
        run: |
          uv run src/message_mind/langgraph_workflow/main.py
